import subprocess
import os
from config.config import BASE_INSTALL_PATH
from src.core import *
from src.utils import run_command3, parse_module_config_file


class GitRepo:
    
    def __init__(self):
        
        self.name = ''
        self.url = ''
        self.path = ''
        self.status = 'unknown'
        
    def printSummary(self):
        
        print(f'\n{ bcolors.CYAN }************************************************************{ bcolors.ENDC }')
        print(f'{ bcolors.BLUE }Name:{ bcolors.ENDC } { self.name }')
        print(f'{ bcolors.BLUE }Installation type:{ bcolors.ENDC } GIT')
        print(f'{ bcolors.BLUE }Reposiroty URL :{ bcolors.ENDC } { self.url }')
        print(f'{ bcolors.CYAN }************************************************************{ bcolors.ENDC }\n')
        
    def parse_config(self, filename):
        '''
        parse config file
        '''
        
        self.url = parse_module_config_file(filename,'REPOSITORY_LOCATION')
        self.name = parse_module_config_file(filename,'NAME')
        self.req_path = parse_module_config_file(filename,'REQ_FILE')
        
        self.path = BASE_INSTALL_PATH + '/' + self.name
        
        self.printSummary()   
        
                
    def clone(self):
        '''
        clone repo using URL of the repo and name in the object
        '''
        
        print_status(f'Cloning repo { self.name }')
        
        cli = 'git clone --depth=1 '+self.url+ ' '+ self.path
        print(f'subprocess for CLI: { cli }')
        run_command3(cli)
        
    def isPresent(self):
        '''
        check if the repo has already has already been cloned in BASE_INSTALL_PATH
        '''
        
        FULL_PATH = os.path.expanduser(self.path)
        
        #print(f'Checking for { FULL_PATH }')
        if os.path.isdir(FULL_PATH):
            
            print_status(f'{ self.name } repository is present in { BASE_INSTALL_PATH }')
            self.status = 'cloned'
            return True
            
        else:
            
            print_warning(f'{ self.name } repository is NOT present in { BASE_INSTALL_PATH }')
            self.status = 'not_present'
            return False
              
    
    def create_venv(self):
        '''
        create pyenv venv
        '''
        
        print_status(f'Creating virtual env for { self.name }') 
        
        #cli = 'cd '+ self.path +';pyenv virtualenv '+ self.name +';pyenv activate '+ self.name+'; python -m pip install -r requirements.txt
        cli = 'cd '+ self.path +';pwd;pyenv virtualenv '+ self.name
        print(f'subprocess for CLI: { cli }') 
        run_command3(cli)
        
    def install_reqs(self):
        '''
        install dependancies
        '''
        
        print_status(f'Installing requirements { self.name }') 
        
        cli = os.environ['HOME']+'/.pyenv/versions/'+ self.name +'/bin/python -m pip install -r '+self.path+self.req_path
        print(f'subprocess for CLI: { cli }') 
        run_command3(cli)
        
    
        
        
        
        
        
        
        
        