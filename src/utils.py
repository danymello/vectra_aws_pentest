import getpass
import socket
import os
import subprocess
import shlex
from src.core import *
from shutil import which
import sys

#sudo pass
sudo_password = ''

def check_internet():
    '''
    Check for internet access.
    '''
    try:
        print_status("Checking for an Internet connection...")
        host = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        host.connect(('google.com', 0))
        host.settimeout(2)
        return True

    except Exception:
        return False
    
def whoami():
    '''
    who am I
    '''
    
    username = getpass.getuser()
    
    print_status(f'Current username is { username }')
    
def checkDistro():
    '''
    check is OS is supported
    '''
    
    supported_os_list = ['Ubuntu','Kali','Debian']
    print_status(f'Checking if OS is supported')
    
    #check release
    r = which('lsb_release')
    if r is None:
        
        print_error(f'OS not supported. Supproted OS are: Ubuntu, Debian & Kali')
        print('Exiting..')
        exit()
    
    lsb_reslease = run_command3('lsb_release -i',no_output = True)
    #bytes to string
    lsb_reslease = lsb_reslease.decode("utf-8")
    for os in supported_os_list:
        if os in lsb_reslease:
            print_status(f'OS is supported: { bcolors.backGreen }{ os }{ bcolors.ENDC }')
            return

    print_error(f'OS NOT supported: { os }')
    

def checkpythonMinVersion():
    '''
    check python  point to python3
    '''
    
    print_status(f'Checking python version')
    
    MIN_PYTHON = (3, 8)
    
    if sys.version_info < MIN_PYTHON:
        
        print_error('Python %s.%s or later is required.' % MIN_PYTHON)
        exit()
        
    else:
        
        print_status(f'Minimum python is installed { MIN_PYTHON }!')
        
def checkPythonDefaultVersion():
    '''
    check python  point to python3
    '''
    
    r = which('python')
    
    if r is None:
        
        print_error(f'Python alias is not set!')
        print_warning(f'Please, run:{ bcolors.PURPLE } sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 10{ bcolors.ENDC }')
        print('Exiting..')
        exit()
        
    else:
        
        print_status(f'Python alias is set.')
        return

def checkpyenv():
    '''
    check if pyenv is installed for current user
    '''
    
    r = which('pyenv')
        
    if r is not None:
            
        print_status(f'pyenv is installed!')
        return True
        
    else:
        
        print_warning(f'pyenv is not installed and required')
        return False
    
def installPyenv():
    '''
    Install Pyenv
    '''
    
    print_status("Installing pyenv")
    run_command3('curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash')
    

    pyenv_bashrc = '''
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv init --path)"
eval "$(pyenv virtualenv-init -)"
'''
    if 'bash' in os.environ['SHELL']:
        
        print_warning(f'Please edit ~/.bashrc and add at the end:')
   
    elif 'zsh' in os.environ['SHELL']:
        
        print_warning(f'Please edit ~/.zshrc and add at the end:')
        
    print(f'{ bcolors.CYAN }{ pyenv_bashrc}{ bcolors.ENDC }')
    print_warning(f'Save and run:{ bcolors.CYAN } exec $SHELL{ bcolors.ENDC }')
    print_warning(f'Once done, run again the installation script!')
    print_status("Exiting now...")
    exit()
    
def pyenvInstallPythonVersion(version):
    '''
    install a python version
    '''
    
    cli = 'pyenv install '+version
    run_command3(cli)
    
def askSudoPassword():
    '''
    Ask for root password
    '''
    
    global sudo_password
    
    #chekc if already root
    if os.geteuid() == 0:
        
        #not needed. Already root
        return
    
    #sudo_password = getpass.getpass(prompt='Enter your (sudo) password: ', stream=None)
    
    pw1 = getpass.getpass(prompt='Enter your (sudo) password: ')
    pw2 = getpass.getpass(prompt='Confirm your (sudo) password: ')

    if pw1 == pw2:
        sudo_password = pw1
    else:
        print_error('Password does not match... Exiting..')
        exit()
        
    if testsudo('sudo id') == False:
        
        print_error(f'Cannot execute command as root.. check your password and your permissions! Exiting..')
        exit()
    
    else:
        
        print_status(f'Sudo looks good!')
    

def testsudo(cmd):
    '''
    test if sudo cli works without prompt
    '''
    
    run_command_sudo_noprompt(cmd, no_output=True)
    
    
def install_prereqs():
    '''
    install dependancies
    '''
    
    print_status("Installing packages dependencies... ")
    print_warning("You will be prompted for root password!")
        
    run_command_sudo('sudo apt-get install -y python3-pip unzip')
    return

def parse_module_config_file(file, attr):
    '''
    read file and return value of an attribute
    :param file file: file object
    :param str attr: look for this attribute
    :return str: return the value of the attribute
    '''
    
    file.seek(0)
    FOUND = False
    
    for line in file:
        # strip any bogus stuff
        line = line.rstrip()
        # if the line starts with the term
        if line.startswith(attr):
            line = line.replace(attr + '="', "")
            line = line.replace(attr + "='", "")
            line = line.replace(attr + "=", "")
            if str(line).endswith('"'): line = line[:-1]
            if str(line).endswith("'"): line = line[:-1]
            
            FOUND = True
            
            return line
        
    if FOUND == False:
        
        print(f'attribute { attr } not found!')
        
        return False
    
def create_dir(dir_path):
    '''
    create a dir
    '''
    
    from src.core import print_status, print_warning
    
    absolute_dir_path = os.path.expanduser(dir_path)
    
    if os.path.isdir(absolute_dir_path):
        
        print_warning(f'{ absolute_dir_path } already exists!')
        
    else:
        
        os.mkdir(absolute_dir_path)
        print_status(f'{ absolute_dir_path } created!')
        
    return
    
    
def run_command(command):
    
    print(f'{ bcolors.BLUE }')
    
    process = subprocess.Popen(shlex.split(command), stdout=subprocess.PIPE, shell=True)
    while True:
        #output = process.stdout.readline() - 2.7
        output = process.stdout.readline().decode()
        if output == '' and process.poll() is not None:
            break
        if output:
            print(output.strip())
    rc = process.poll()
    print(f'{ bcolors.ENDC }')
    return rc

def run_command2(command):
    
    print(f'{ bcolors.BLUE }')
    
    ret = subprocess.run(command, capture_output=True, shell=True)

    print(ret.stdout.decode())
    print(f'{ bcolors.ENDC }')
    
def run_command3(command, no_output=False):
    
    if no_output == False:
        print(f'\n{ bcolors.BLUE }')
    
    process = subprocess.Popen(command,stdout=subprocess.PIPE, shell=True, executable="/bin/bash")
    proc_stdout = process.communicate()[0].strip()
    for line in proc_stdout.decode().split('\n'):
        if no_output == False:
            print(line)
    
    if no_output == False: 
        print(f'{ bcolors.ENDC }')
    return proc_stdout
    
def run_command_sudo(command):
    
    print_status(f'Running in user mode')
    
    print(f'\n{ bcolors.BLUE }')
    
    sudo_password = getpass.getpass(prompt='sudo password: ')
    
    process = subprocess.Popen(command,stdout=subprocess.PIPE, shell=True, executable="/bin/bash")
    process.communicate(input=(sudo_password+'\n').encode(),timeout=60)
    proc_stdout = process.communicate()[0].strip()
    for line in proc_stdout.decode().split('\n'):
        print(line)
        
    print(f'{ bcolors.ENDC }')
    
def run_command_sudo_noprompt(command, no_output=False):
    
    print_warning(f'Running in elevated mode')
    
    if no_output == False:
        print(f'\n{ bcolors.BLUE }')
    
    process = subprocess.Popen(command,stdout=subprocess.PIPE, shell=True, executable="/bin/bash")
    process.communicate(sudo_password+'\n',timeout=60)
    proc_stdout = process.communicate()[0].strip()
    for line in proc_stdout.decode().split('\n'):
        if '[sudo] password' in line:
            return False
        if no_output == False:
            print(line)
    
    if no_output == False:   
        print(f'{ bcolors.ENDC }')
    return True