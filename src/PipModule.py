import subprocess
from src.core import * 
import sys
import pkg_resources
from src.utils import run_command3, parse_module_config_file
import time

class PipModule:
    
    def __init__(self):
        
        self.name = ''
        self.url = ''
        self.status = 'unknown'
        self.venv = False
        
    def printSummary(self):
        
        print(f'\n{ bcolors.CYAN }************************************************************{ bcolors.ENDC }')
        print(f'{ bcolors.BLUE }Name: { bcolors.ENDC }{ self.name }')
        print(f'{ bcolors.BLUE }Installation type: { bcolors.ENDC }PIP')
        print(f'{ bcolors.BLUE }Project info: { bcolors.ENDC }{ self.url }')
        print(f'{ bcolors.CYAN }************************************************************{ bcolors.ENDC }\n')
        
        
    def parse_config(self, filename):
        '''
        parse config file
        '''
        
        self.name = parse_module_config_file(filename,'NAME')
        self.url = parse_module_config_file(filename,'REPOSITORY_LOCATION')
        self.printSummary()
        
    def create_venv(self):
        '''
        create pyenv venv
        '''
        
        print_status(f'Creating virtual env for { self.name }') 
        
        cli = 'pyenv virtualenv '+ self.name
        print(f'subprocess for CLI: { cli }') 
        run_command3(cli)
        self.venv = True
        
    
    
    def install(self):
        '''
        install with pip
        '''
        
        if self.venv == False:
            
            print_error(f'virtualenv for { self.name } is missing')
           
        print_status(f'Installing Pip package: { self.name } in venv {self.name }')
        
        cli = os.environ['HOME']+'/.pyenv/versions/'+ self.name +'/bin/pip install '+self.name
        print(f'subprocess for CLI: { cli }')
        run_command3(cli)
          
    def uninstall(self):
        '''
        uninstall with pip
        '''
    
    def checkStatus(self):
        '''
        check if the module is installed
        '''
        
        install_list = {pkg.key for pkg in pkg_resources.working_set}
        
        for i in install_list:
            
            if self.name in install_list:
                
                print_status(f'{ self.name } is installed')
                self.status = 'installed'
                return True
            
        print_warning(f'{ self.name } is NOT installed')
        self.status = 'not present'
        return False
        
        
        
        